//// Code generated by mockery v2.12.2. DO NOT EDIT.
//
package system

//
//import (
//	context "context"
//	orm "gobase/api/internal/repository/orm"
//
//	mock "github.com/stretchr/testify/mock"
//
//	testing "testing"
//)
//
//// MockRepository is an autogenerated mock type for the MockRepository type
//type MockRepository struct {
//	mock.Mock
//}
//
//// AddFriend provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) AddFriend(_a0 context.Context, _a1 int, _a2 int) error {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// Block provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) Block(_a0 context.Context, _a1 int, _a2 int) error {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// CheckDB provides a mock function with given fields: _a0
//func (_m *MockRepository) CheckDB(_a0 context.Context) error {
//	ret := _m.Called(_a0)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
//		r0 = rf(_a0)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// CheckExistedBlock provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) CheckExistedBlock(_a0 context.Context, _a1 int, _a2 int) error {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// CheckExistedFriend provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) CheckExistedFriend(_a0 context.Context, _a1 int, _a2 int) error {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// CheckExistedSubscribe provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) CheckExistedSubscribe(_a0 context.Context, _a1 int, _a2 int) error {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// CreateUser provides a mock function with given fields: _a0, _a1
//func (_m *MockRepository) CreateUser(_a0 context.Context, _a1 string) (int, error) {
//	ret := _m.Called(_a0, _a1)
//
//	var r0 int
//	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
//		r0 = rf(_a0, _a1)
//	} else {
//		r0 = ret.Get(0).(int)
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
//		r1 = rf(_a0, _a1)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// FindFriendList provides a mock function with given fields: _a0, _a1
//func (_m *MockRepository) FindFriendList(_a0 context.Context, _a1 int) ([]string, error) {
//	ret := _m.Called(_a0, _a1)
//
//	var r0 []string
//	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
//		r0 = rf(_a0, _a1)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).([]string)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
//		r1 = rf(_a0, _a1)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// FindUserByEmail provides a mock function with given fields: _a0, _a1
//func (_m *MockRepository) FindUserByEmail(_a0 context.Context, _a1 string) (*orm.User, error) {
//	ret := _m.Called(_a0, _a1)
//
//	var r0 *orm.User
//	if rf, ok := ret.Get(0).(func(context.Context, string) *orm.User); ok {
//		r0 = rf(_a0, _a1)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*orm.User)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
//		r1 = rf(_a0, _a1)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// Subscribe provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) Subscribe(_a0 context.Context, _a1 int, _a2 int) error {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// UpdateReceiver provides a mock function with given fields: _a0, _a1, _a2
//func (_m *MockRepository) UpdateReceiver(_a0 context.Context, _a1 int, _a2 []string) ([]string, error) {
//	ret := _m.Called(_a0, _a1, _a2)
//
//	var r0 []string
//	if rf, ok := ret.Get(0).(func(context.Context, int, []string) []string); ok {
//		r0 = rf(_a0, _a1, _a2)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).([]string)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, int, []string) error); ok {
//		r1 = rf(_a0, _a1, _a2)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// NewMockRepository creates a new instance of MockRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
//func NewMockRepository(t testing.TB) *MockRepository {
//	mock := &MockRepository{}
//	mock.Mock.Test(t)
//
//	t.Cleanup(func() { mock.AssertExpectations(t) })
//
//	return mock
//}
